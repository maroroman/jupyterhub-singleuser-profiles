{"version":3,"sources":["globals.js","SizesForm/index.js","SizesForm/components/SizesForm.js","ImageForm/index.js","ImageForm/components/ImageForm.js","EnvVarForm/index.js","EnvVarForm/components/EnvVarForm.js","GpuForm/index.js","GpuForm/components/GpuForm.js","App.js","serviceWorker.js","index.js"],"names":["_USERNAME","_IMAGE","SizesForm","props","CustomToggle","React","forwardRef","ref","children","onClick","e","preventDefault","Button","className","variant","state","userCM","sizeList","selectedValue","sizeDesc","fetch","this","username","method","then","response","ok","json","Error","data","setState","event","value","target","text","json_data","result","name","resources","limits","cpu","memory","requests","console","log","updateConfigmap","updateSizes","JSON","stringify","last_selected_size","body","headers","Form","FormGroup","Dropdown","as","ButtonGroup","Toggle","id","DropdownValue","Menu","OverlayTrigger","trigger","placement","rootClose","overlay","Popover","Title","Content","Item","onMouseLeave","waitForLoad","postChange","eventKey","length","map","index","onMouseEnter","generateSizeDesc","toString","Component","ImageForm","imageList","updateImages","last_selected_image","EnvVarForm","envvars","items","renderForms","updateVars","vars","formgroup","document","getElementById","i","key","nextSibling","placeholder","sendVars","parentElement","remove","onBlur","newItem","FormControl","type","removeForm","previousState","Object","entries","env","Accordion","defaultActiveKey","Card","Header","Collapse","Body","item","Row","addForm","GpuForm","gpu_value","updateGpu","obj","gpu","parseInt","Control","onChange","globals","App","Navbar","bg","sticky","expand","Brand","href","Text","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2WAAe,G,YAAA,CACXA,UAAW,SACXC,OAAQ,K,wFCAGC,G,wDCUX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAiGVC,aAAeC,IAAMC,YAAW,WAAwBC,GAAxB,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OAC5B,uBACIF,IAAKA,EACLE,QAAS,SAACC,GACNA,EAAEC,iBACFF,EAAQC,KAGZ,kBAACE,EAAA,EAAD,CAAQC,UAAU,YAAYC,QAAQ,SAClC,yBAAKD,UAAU,YACVL,EACD,uBAAGK,UAAU,iBAAb,gBA3GZ,EAAKE,MAAQ,CACTC,OAAQ,GACRC,SAAU,GACVC,cAAe,GACfC,SAAU,IANC,E,8DAUA,IAAD,OACdC,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAO,QACxDC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,8BAGvBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CAACd,OAAQa,S,oCAIpB,IAAD,OACVT,MAAM,aAAc,CAACG,OAAQ,QACxBC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,qBAGvBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CAACb,SAAUY,S,uCAIpBE,GAAQ,IAAD,OAChBC,EAAQD,EAAME,OAAOC,KACrBC,EAAY,GACZC,EAAS,GACbhB,MAAM,YAAaY,EAAO,CAACT,OAAQ,QAClCC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,qBAGvBJ,MAAK,SAAAK,GACFM,EAAYN,EACZO,EAAS,yCACOD,EAAUE,KADjB,IACuB,6BADvB,gBAESF,EAAUG,UAAUC,OAAOC,IAFpC,YAEkDL,EAAUG,UAAUC,OAAOE,OAF7E,IAEqF,6BAFrF,kBAGWN,EAAUG,UAAUI,SAASF,IAHxC,YAGsDL,EAAUG,UAAUI,SAASD,OAHnF,IAG2F,8BAEpG,EAAKX,SAAS,CAACX,SAAUiB,GAASO,QAAQC,IAAI,EAAK7B,MAAMI,gB,kCAKrDY,GACR,IAAIK,EAAS,yCAGbf,KAAKS,SAAS,CAACX,SAAUiB,GAASO,QAAQC,IAAI,wB,0CAI9CvB,KAAKwB,kBACLxB,KAAKyB,gB,2CAILzB,KAAKyB,gB,iCAGEf,GACP,IAAIJ,EAAOoB,KAAKC,UAAU,CAACC,mBAAoBlB,EAAME,OAAOC,OAE5Dd,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAQ,OAAQ2B,KAAMvB,EAAMwB,QAAQ,CAAC,eAAgB,sBAC3GR,QAAQC,IAAI,cAAejB,GAC3BN,KAAKwB,oB,sCAIL,OAAgC,MAA5BxB,KAAKN,MAAMG,eAAqD,IAA5BG,KAAKN,MAAMG,cACxCG,KAAKN,MAAMG,cAGX,Y,+BAqBJ,IAAD,OAEN,OADAG,KAAKN,MAAMG,cAAgBG,KAAKN,MAAMC,OAAX,mBAEvB,6BACI,kBAACoC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,GAAIC,KACV,kBAACF,EAAA,EAASG,OAAV,CAAiBF,GAAIlC,KAAKjB,aAAcsD,GAAG,qBAAqBrC,KAAKsC,iBACrE,kBAACL,EAAA,EAASM,KAAV,CAAe/C,UAAU,aACjB,kBAACgD,EAAA,EAAD,CACIC,QAAQ,QACRC,UAAU,QACVC,UAAU,OACVC,QACI,kBAACC,EAAA,EAAD,CAASR,GAAG,iBACR,kBAACQ,EAAA,EAAQC,MAAT,CAAeZ,GAAG,MAAlB,iBACA,kBAACW,EAAA,EAAQE,QAAT,KACI,qGAOhB,kBAACd,EAAA,EAASe,KAAV,CAAeC,aAAc,SAAC5D,GAAD,OAAO,EAAK6D,YAAY7D,IAAID,QAAS,SAACC,GAAD,OAAO,EAAK8D,WAAW9D,IAAI+D,SAAUpD,KAAKN,MAAME,SAASyD,OAAS,GAApI,YAEHrD,KAAKN,MAAME,SAAS0D,KAAI,SAAC3C,EAAO4C,GAAR,OACjB,kBAACf,EAAA,EAAD,CACAC,QAAQ,QACRC,UAAU,QACVC,UAAU,OACVC,QACI,kBAACC,EAAA,EAAD,CAASR,GAAG,iBACR,kBAACQ,EAAA,EAAQC,MAAT,CAAeZ,GAAG,MAAlB,SAA8BvB,GAC9B,kBAACkC,EAAA,EAAQE,QAAT,KACK,EAAKrD,MAAMI,YAKpB,kBAACmC,EAAA,EAASe,KAAV,CAAeQ,aAAc,SAACnE,GAAD,OAAO,EAAKoE,iBAAiBpE,IAAI4D,aAAc,SAAC5D,GAAD,OAAO,EAAK6D,YAAY7D,IAAID,QAAS,SAACC,GAAD,OAAO,EAAK8D,WAAW9D,IAAI+D,SAAUG,EAAMG,YAAa/C,SAKjL,W,GAlKZ3B,IAAM2E,YCRfC,G,wDCQX,WAAY9E,GAAQ,IAAD,8BACf,cAAMA,IAsEVC,aAAeC,IAAMC,YAAW,WAAwBC,GAAxB,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAAb,OAC5B,uBACIF,IAAKA,EACLE,QAAS,SAACC,GACNA,EAAEC,iBACFF,EAAQC,KAGZ,kBAACE,EAAA,EAAD,CAAQC,UAAU,YAAYC,QAAQ,SAClC,yBAAKD,UAAU,aACVL,EACD,uBAAGK,UAAU,iBAAb,gBAhFZ,EAAKE,MAAQ,CACTmE,UAAW,GACXhE,cAAe,IAJJ,E,8DAQA,IAAD,OACdE,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAO,QACxDC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,8BAGvBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CAACZ,cAAeW,EAAI,2B,qCAI/B,IAAD,OACVT,MAAM,cAAe,CAACG,OAAQ,QACzBC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,qBAGvBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CAACoD,UAAWrD,S,0CAKlCR,KAAKwB,kBACLxB,KAAK8D,iB,2CAIL9D,KAAK8D,iB,iCAKEpD,GACP,IAAIJ,EAAOoB,KAAKC,UAAU,CAACoC,oBAAqBrD,EAAME,OAAOC,OAE7Dd,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAQ,OAAQ2B,KAAMvB,EAAMwB,QAAQ,CAAC,eAAgB,sBAC3GR,QAAQC,IAAI,qBAAsBjB,GAClCN,KAAKwB,oB,sCAIL,OAAgC,MAA5BxB,KAAKN,MAAMG,eAAqD,IAA5BG,KAAKN,MAAMG,cACxCG,KAAKN,MAAMG,cAGgB,GAA/BG,KAAKN,MAAMmE,UAAUR,OACbrD,KAAKN,MAAMmE,UAAU,GAGrB,wB,+BAuBR,IAAD,OACN,OACI,6BACI,kBAAC9B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,GAAIC,KACV,kBAACF,EAAA,EAASG,OAAV,CAAiBF,GAAIlC,KAAKjB,aAAcsD,GAAG,kBAAkBrC,KAAKsC,iBAClE,kBAACL,EAAA,EAASM,KAAV,CAAe/C,UAAU,aACpBQ,KAAKN,MAAMmE,UAAUP,KAAI,SAAC3C,EAAO4C,GAAR,OACd,kBAACtB,EAAA,EAASe,KAAV,CAAe5D,QAAS,SAACC,GAAD,OAAO,EAAK8D,WAAW9D,IAAI+D,SAAUG,EAAMG,YAAa/C,QAIxF,W,GAxGZ3B,IAAM2E,Y,gDCNfK,E,kDCSX,WAAYlF,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTuE,QAAS,GACTC,MAAO,IAJI,E,yDAQL,IAAD,OACTnE,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAO,QACxDC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,8BAGvBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CAACwD,QAASzD,EAAI,MAC5B,EAAK2D,mB,0CAKbnE,KAAKoE,e,6BAGF/E,GAIH,IAHA,IACIgF,EAAO,GACPC,EAFYC,SAASC,eAAe,aAEdrF,SACjBsF,EAAI,EAAGA,EAAIH,EAAUjB,OAAQoB,IAAK,CACvC,IACIC,EADWJ,EAAUG,GAAGtF,SACT,GACfuF,EAAI/D,MACA+D,EAAIC,YAAYhE,MAChB0D,EAAKK,EAAI/D,OAAS+D,EAAIC,YAAYhE,MAGlC0D,EAAKK,EAAI/D,OAAS+D,EAAIC,YAAYC,YAIlCF,EAAIC,YAAYhE,MAChB0D,EAAKK,EAAIE,aAAeF,EAAIC,YAAYhE,MAGxC0D,EAAKK,EAAIE,aAAeF,EAAIC,YAAYC,YAMpD5E,KAAKS,SAAS,CAACwD,QAASI,IAAO,WAAYrE,KAAK6E,gB,iCAGzCxF,GACMA,EAAEuB,OAAOkE,cACfC,SACP/E,KAAKgF,W,8BAGD3F,GAAG,IAAD,OACA4F,EAAU,CACZ,kBAACC,EAAA,EAAD,CAAa1F,UAAU,WAAWwB,KAAK,MAAMmE,KAAK,OAAOP,YAAY,MAAMI,OAAQ,SAAC3F,GAAD,OAAO,EAAK2F,OAAO3F,MACtG,kBAAC6F,EAAA,EAAD,CAAa1F,UAAU,WAAW2F,KAAK,OAAOP,YAAY,QAAQI,OAAQ,SAAC3F,GAAD,OAAO,EAAK2F,OAAO3F,MAC7F,kBAACE,EAAA,EAAD,CAAQC,UAAU,WAAWC,QAAQ,SAASL,QAAS,SAACC,GAAD,OAAO,EAAK+F,WAAW/F,KAA9E,WAIJW,KAAKS,UAAS,SAAA4E,GAAa,MAAK,CAC5BnB,MAAM,GAAD,mBAAMmB,EAAcnB,OAApB,CAA2Be,U,oCAIzB,IAAD,OACV3D,QAAQC,IAAI,mBAAoBvB,KAAKN,MAAMuE,SAC3C,IAFU,2CAEES,EAFF,KAEO/D,EAFP,KAGAsE,EAAU,CACR,kBAACC,EAAA,EAAD,CAAa1F,UAAU,WAAWwB,KAAK,MAAMmE,KAAK,OAAOP,YAAaF,EAAKM,OAAQ,SAAC3F,GAAD,OAAO,EAAK2F,OAAO3F,MACtG,kBAAC6F,EAAA,EAAD,CAAa1F,UAAU,WAAW2F,KAAK,OAAOP,YAAajE,EAAOqE,OAAQ,SAAC3F,GAAD,OAAO,EAAK2F,OAAO3F,MAC7F,kBAACE,EAAA,EAAD,CAAQC,UAAU,WAAWC,QAAQ,SAASL,QAAS,SAACC,GAAD,OAAO,EAAK+F,WAAW/F,KAA9E,WAIR,EAAKoB,UAAS,SAAA4E,GAAa,MAAK,CAC5BnB,MAAM,GAAD,mBAAMmB,EAAcnB,OAApB,CAA2Be,SATxC,MAA2BK,OAAOC,QAAQvF,KAAKN,MAAMuE,SAArD,eAAgE,M,iCAehE,IAAI3D,EAAOoB,KAAKC,UAAU,CAAC6D,IAAKxF,KAAKN,MAAMuE,UAE3ClE,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAQ,OAAQ2B,KAAMvB,EAAMwB,QAAQ,CAAC,eAAgB,sBAC3GR,QAAQC,IAAI,gBAAiBjB,K,+BAGtB,IAAD,OACN,OACI,kBAACmF,EAAA,EAAD,CAAWC,iBAAiB,KACxB,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAUrD,OAAX,CAAkB5C,UAAU,aAAa0C,GAAIyD,IAAKC,OAAQxC,SAAS,KAAnE,0BAGA,kBAACqC,EAAA,EAAUI,SAAX,CAAoBzC,SAAS,KACzB,kBAACuC,EAAA,EAAKG,KAAN,KACI,kBAAC/D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWK,GAAG,aACTrC,KAAKN,MAAMwE,MAAMZ,KAAI,SAAAyC,GAAI,OAClB,kBAAChE,EAAA,EAAKiE,IAAN,CAAUxG,UAAU,UAAUuG,OAG1C,kBAACxG,EAAA,EAAD,CAAQE,QAAQ,UAAUL,QAAS,SAACC,GAAD,OAAO,EAAK4G,QAAQ5G,KAAvD,gB,GApHPL,IAAM2E,WCPhBuC,G,wDCKX,WAAYpH,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTyG,UAAW,GAHA,E,wDAON,IAAD,OACRpG,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAO,QACxDC,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAGhB,MAAM,IAAIC,MAAM,8BAGvBJ,MAAK,SAAAK,GACF,EAAKC,SAAS,CAAC0F,UAAW3F,EAAI,W,0CAKtCR,KAAKoG,c,iCAGE1F,GACP,GAAkC,IAA9BA,EAAME,OAAOD,MAAM0C,OAAvB,CAGA,IAAMgD,EAAM,CACRC,IAAKC,SAAS7F,EAAME,OAAOD,QAEzBL,EAAOoB,KAAKC,UAAU0E,GAE5BtG,MAAM,aAAaC,KAAKlB,MAAMmB,SAAS,aAAc,CAACC,OAAQ,OAAQ2B,KAAMvB,EAAMwB,QAAQ,CAAC,eAAgB,sBAC3GR,QAAQC,IAAI,kBAAmBjB,M,+BAGxB,IAAD,OACN,OACI,kBAAC0B,EAAA,EAAD,KACI,kBAACD,EAAA,EAAKyE,QAAN,CAAchH,UAAU,UAAU2F,KAAK,OAAOP,YAAa5E,KAAKN,MAAMyG,UAAWM,SAAU,SAACpH,GAAD,OAAO,EAAK8D,WAAW9D,W,GA3C5GL,IAAM2E,Y,gBCI5B+C,EAAQ/H,UAAY,SACpB+H,EAAQ9H,OAAS,GAoCF+H,MAlCf,WACE,OACI,yBAAKnH,UAAU,OACb,kBAACoH,EAAA,EAAD,CAAQC,GAAG,SAASpH,QAAQ,OAAOqH,OAAO,MAAMC,OAAO,MACrD,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,sBACA,kBAACL,EAAA,EAAOf,SAAR,CAAiBrG,UAAU,uBACzB,kBAACoH,EAAA,EAAOM,KAAR,sBACiBR,EAAQ/H,aAI7B,4BAAQa,UAAU,cAChB,yBAAKA,UAAU,QACb,wBAAIA,UAAU,QAAd,2BACA,kBAAC,EAAD,CAAW2H,MAAOT,EAAQ9H,OAAQqB,SAAUyG,EAAQ/H,aAEtD,wBAAIa,UAAU,QAAd,oBACA,6BACE,yBAAKA,UAAU,QACb,wBAAIA,UAAU,QAAd,mBACA,kBAAC,EAAD,CAAWS,SAAUyG,EAAQ/H,aAE/B,yBAAKa,UAAU,QACb,wBAAIA,UAAU,QAAd,QACA,kBAAC,EAAD,CAASS,SAAUyG,EAAQ/H,cAI/B,kBAAC,EAAD,CAAYsB,SAAUyG,EAAQ/H,eC7BpByI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASC,eAAe,SDyHpB,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrB3H,MAAK,SAAA4H,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5G,QAAQ4G,MAAMA,EAAMC,c","file":"static/js/main.c4de81c0.chunk.js","sourcesContent":["export default {\n    _USERNAME: \"mroman\",\n    _IMAGE: \"\",\n};","import SizesForm from './components/SizesForm';\n\nexport default SizesForm;\nexport {SizesForm};","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\nimport Dropdown from 'react-bootstrap/Dropdown'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\nimport './SizesForm.css'\n\nclass SizesForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userCM: '',\n            sizeList: [],\n            selectedValue: '',\n            sizeDesc: '',\n        }\n    }\n\n    updateConfigmap() {\n        fetch('/api/user/'+this.props.username+'/configmap', {method:'GET'})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } \n                else {\n                    throw new Error('Failed to fetch user cm');\n                }\n            })\n            .then(data => {\n                this.setState({userCM: data})\n            }) \n    }\n\n    updateSizes() {\n        fetch('/api/sizes', {method: 'GET'})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } \n                else {\n                    throw new Error('Unknown error.');\n                }\n            })\n            .then(data => {\n                this.setState({sizeList: data});\n            })\n    }\n\n    generateSizeDesc(event) {\n        var value = event.target.text\n        var json_data = {}\n        var result = ''\n        fetch('api/size/'+ value, {method: 'GET'})\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            } \n            else {\n                throw new Error('Unknown error.');\n            }\n        })\n        .then(data => {\n            json_data = data\n            result = <p>\n                Size name: {json_data.name} <br/>\n                Limits: CPU: {json_data.resources.limits.cpu} Memory: {json_data.resources.limits.memory} <br/>\n                Requests: CPU: {json_data.resources.requests.cpu} Memory: {json_data.resources.requests.memory} <br/>\n            </p>\n            this.setState({sizeDesc: result}, console.log(this.state.sizeDesc))\n            });\n        \n    }\n\n    waitForLoad(event) {\n        var result = <p>\n            Loading...\n        </p>\n        this.setState({sizeDesc: result}, console.log('loading size desc'));\n    }\n\n    componentDidMount() {\n        this.updateConfigmap()\n        this.updateSizes()\n    }\n\n    componentDidUpdate() {\n        this.updateSizes()\n    }\n\n    postChange(event) {\n        var json = JSON.stringify({last_selected_size: event.target.text})\n        //var json_string = '{\"last_selected_size\":\"'+event.target.text+'\"}'\n        fetch('/api/user/'+this.props.username+'/configmap', {method: 'POST', body: json, headers:{'Content-Type': 'application/json',}})\n        console.log('Size sent: ', json)\n        this.updateConfigmap()\n    }\n\n    DropdownValue() {\n        if (this.state.selectedValue != null && this.state.selectedValue != '') {\n            return this.state.selectedValue\n        }\n        else {\n            return \"Default\"\n        }\n    }\n\n    CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n        <a\n            ref={ref}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n          }}\n        >\n            <Button className=\"SizesForm\" variant=\"light\">\n                <div className=\"SizeGrid\">\n                    {children}\n                    <p className=\"DropdownRight\">&#x25bc;</p>\n                </div>\n            </Button>\n        </a>\n      ));\n\n    render () {\n        this.state.selectedValue = this.state.userCM['last_selected_size']\n        return (\n            <div>\n                <Form>\n                    <FormGroup>\n                        <Dropdown as={ButtonGroup}>\n                            <Dropdown.Toggle as={this.CustomToggle} id=\"dropdown-custom-1\">{this.DropdownValue()}</Dropdown.Toggle>\n                            <Dropdown.Menu className=\"SizesMenu\">\n                                    <OverlayTrigger\n                                        trigger=\"hover\"\n                                        placement=\"right\"\n                                        rootClose=\"true\"\n                                        overlay={\n                                            <Popover id=\"popover-basic\">\n                                                <Popover.Title as=\"h3\">Size: Default</Popover.Title>\n                                                <Popover.Content>\n                                                    <p>\n                                                        Resources will be set based on profiles configured by administrator\n                                                    </p>\n                                                </Popover.Content>\n                                            </Popover>\n                                        }\n                                        >\n                                    <Dropdown.Item onMouseLeave={(e) => this.waitForLoad(e)} onClick={(e) => this.postChange(e)} eventKey={this.state.sizeList.length + 1}>Default</Dropdown.Item>\n                                </OverlayTrigger>\n                                {this.state.sizeList.map((value, index) => (\n                                        <OverlayTrigger\n                                        trigger=\"hover\"\n                                        placement=\"right\"\n                                        rootClose=\"true\"\n                                        overlay={\n                                            <Popover id=\"popover-basic\">\n                                                <Popover.Title as=\"h3\">Size: {value}</Popover.Title>\n                                                <Popover.Content>\n                                                    {this.state.sizeDesc}\n                                                </Popover.Content>\n                                            </Popover>\n                                        }\n                                        >\n                                            <Dropdown.Item onMouseEnter={(e) => this.generateSizeDesc(e)} onMouseLeave={(e) => this.waitForLoad(e)} onClick={(e) => this.postChange(e)} eventKey={index.toString()}>{value}</Dropdown.Item>\n                                        </OverlayTrigger>\n                                    )\n                                    )}\n                            </Dropdown.Menu>\n                        </Dropdown>{' '}\n                    </FormGroup>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default SizesForm;","import ImageForm from './components/ImageForm';\n\nexport default ImageForm;\nexport {ImageForm};","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport './ImageForm.css';\n\nclass ImageForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            imageList: [],\n            selectedValue: '',\n        }\n    }\n\n    updateConfigmap() {\n        fetch('/api/user/'+this.props.username+'/configmap', {method:'GET'})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } \n                else {\n                    throw new Error('Failed to fetch user cm');\n                }\n            })\n            .then(data => {\n                this.setState({selectedValue: data['last_selected_image']})\n            }) \n    }\n\n    updateImages(){\n        fetch('/api/images', {method: 'GET'})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } \n                else {\n                    throw new Error('Unknown error.');\n                }\n            })\n            .then(data => {\n                this.setState({imageList: data});\n            })\n    }\n\n    componentDidMount() {\n        this.updateConfigmap()\n        this.updateImages()\n    }\n\n    componentDidUpdate(){\n        this.updateImages()\n    }\n\n\n\n    postChange(event) {\n        var json = JSON.stringify({last_selected_image: event.target.text})\n        //var json_string = '{\"last_selected_image\":\"'+event.target.text+'\"}'\n        fetch('/api/user/'+this.props.username+'/configmap', {method: 'POST', body: json, headers:{'Content-Type': 'application/json',}})  //TODO: Make username a variable!\n        console.log(\"Sent chosen image:\", json); // Event target value is current (using this.state.selectedValue returned the previous value)\n        this.updateConfigmap()\n    }\n\n    DropdownValue() {\n        if (this.state.selectedValue != null && this.state.selectedValue != '') {\n            return this.state.selectedValue\n        }\n        else {\n            if(this.state.imageList.length != 0) {\n                return this.state.imageList[0]\n            }\n            else {\n                return \"No images available\"\n            }\n        }\n    }\n\n    CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n        <a\n            ref={ref}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n          }}\n        >\n            <Button className=\"ImageForm\" variant=\"light\">\n                <div className=\"ImageGrid\">\n                    {children}\n                    <p className=\"DropdownRight\">&#x25bc;</p>\n                </div>\n            </Button>\n        </a>\n      ));\n\n\n    render () {\n        return (\n            <div>\n                <Form>\n                    <FormGroup>\n                        <Dropdown as={ButtonGroup}>\n                            <Dropdown.Toggle as={this.CustomToggle} id=\"dropdown-image\">{this.DropdownValue()}</Dropdown.Toggle>\n                            <Dropdown.Menu className=\"ImageMenu\">\n                                {this.state.imageList.map((value, index) => (\n                                            <Dropdown.Item onClick={(e) => this.postChange(e)} eventKey={index.toString()}>{value}</Dropdown.Item>\n                                    )\n                                    )}\n                            </Dropdown.Menu>\n                        </Dropdown>{' '}\n                    </FormGroup>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default ImageForm","import EnvVarForm from './components/EnvVarForm';\n\nexport default EnvVarForm;\nexport {EnvVarForm};","import React from 'react'\nimport './EnvVarForm.css';\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\nimport FormGroup from 'react-bootstrap/FormGroup'\nimport Button from 'react-bootstrap/Button'\nimport FormControl from 'react-bootstrap/FormControl'\n\nclass EnvVarForm extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            envvars: {},\n            items: [],\n        }\n    }\n\n    updateVars() {\n        fetch('/api/user/'+this.props.username+'/configmap', {method:'GET'})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } \n                else {\n                    throw new Error('Failed to fetch user cm');\n                }\n            })\n            .then(data => {\n                this.setState({envvars: data['env']})\n                this.renderForms()\n            }) \n    }\n\n    componentDidMount() {\n        this.updateVars()\n    }\n\n    onBlur(e) {\n        var container = document.getElementById('container')\n        var vars = {}\n        var formgroup = container.children\n        for (var i = 0; i < formgroup.length; i++) {\n            var children = formgroup[i].children\n            var key = children[0]\n            if (key.value) {\n                if (key.nextSibling.value){\n                    vars[key.value] = key.nextSibling.value\n                }\n                else {\n                    vars[key.value] = key.nextSibling.placeholder\n                }\n            }\n            else {\n                if (key.nextSibling.value){\n                    vars[key.placeholder] = key.nextSibling.value\n                }\n                else {\n                    vars[key.placeholder] = key.nextSibling.placeholder\n                }\n                \n            }\n            \n        }\n        this.setState({envvars: vars}, function() {this.sendVars()}) \n    }\n\n    removeForm(e) {\n        var parent = e.target.parentElement\n        parent.remove()\n        this.onBlur()\n    }\n\n    addForm(e){\n        const newItem = [\n            <FormControl className=\"InnerGap\" name='key' type=\"text\" placeholder='key' onBlur={(e) => this.onBlur(e)}/>,\n            <FormControl className=\"InnerGap\" type=\"text\" placeholder='value' onBlur={(e) => this.onBlur(e)}/>,\n            <Button className=\"InnerGap\" variant='danger' onClick={(e) => this.removeForm(e)}>\n                Remove\n            </Button>\n            ]\n        this.setState(previousState => ({\n            items: [...previousState.items, newItem]\n        }));\n    }\n\n    renderForms() {\n        console.log('Logging envvars:', this.state.envvars)\n        for (const [key, value] of Object.entries(this.state.envvars)) {\n            const newItem = [\n                    <FormControl className=\"InnerGap\" name='key' type=\"text\" placeholder={key} onBlur={(e) => this.onBlur(e)}/>,\n                    <FormControl className=\"InnerGap\" type=\"text\" placeholder={value} onBlur={(e) => this.onBlur(e)}/>,\n                    <Button className=\"InnerGap\" variant='danger' onClick={(e) => this.removeForm(e)}>\n                        Remove\n                    </Button>\n                    ]\n            this.setState(previousState => ({\n                items: [...previousState.items, newItem]\n            }));\n        }\n    }\n\n    sendVars(){\n        var json = JSON.stringify({env: this.state.envvars})\n        //var json_string = '{\"env\":'+ JSON.stringify(this.state.envvars) +'}'\n        fetch('/api/user/'+this.props.username+'/configmap', {method: 'POST', body: json, headers:{'Content-Type': 'application/json',}})\n        console.log('Sent EnvVars:', json)\n    }\n\n    render () {\n        return (\n            <Accordion defaultActiveKey=\"0\">\n                <Card>\n                    <Accordion.Toggle className=\"EnvVarForm\" as={Card.Header} eventKey=\"0\">\n                        Environment Variables:\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <Form>\n                                <FormGroup id='container'>\n                                    {this.state.items.map(item => (\n                                            <Form.Row className=\"RowGap\">{item}</Form.Row>\n                                    ))}\n                                </FormGroup>\n                                <Button variant='primary' onClick={(e) => this.addForm(e)}>\n                                    Add\n                                </Button>\n                            </Form>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        )\n    }\n\n}\n\nexport default EnvVarForm","import GpuForm from './components/GpuForm';\n\nexport default GpuForm;\nexport {GpuForm};","\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport './GpuForm.css'\n\nclass GpuForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            gpu_value: 0,\n        }\n    }\n\n    updateGpu() {\n        fetch('/api/user/'+this.props.username+'/configmap', {method:'GET'})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } \n                else {\n                    throw new Error('Failed to fetch user cm');\n                }\n            })\n            .then(data => {\n                this.setState({gpu_value: data['gpu']})\n            }) \n    }\n\n    componentDidMount() {\n        this.updateGpu()\n    }\n\n    postChange(event) {\n        if (event.target.value.length === 0) {\n            return\n        }\n        const obj = {\n            gpu: parseInt(event.target.value)\n        }\n        const json = JSON.stringify(obj)\n        //var json_string = '{\"gpu\":\"'+event.target.value+'\"}'\n        fetch('/api/user/'+this.props.username+'/configmap', {method: 'POST', body: json, headers:{'Content-Type': 'application/json',}})\n        console.log('GPU value sent:', json)\n    }\n\n    render () {\n        return (\n            <FormGroup>\n                <Form.Control className=\"GpuForm\" type=\"text\" placeholder={this.state.gpu_value} onChange={(e) => this.postChange(e)}/>\n            </FormGroup>\n        )\n    }\n} \n   \nexport default GpuForm","import React from 'react';\nimport './App.css';\nimport globals from './globals';\nimport SizesForm from './SizesForm';\nimport ImageForm from './ImageForm';\nimport EnvVarForm from './EnvVarForm';\nimport GpuForm from './GpuForm';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\n\nglobals._USERNAME = 'mroman'\nglobals._IMAGE = ''\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Navbar bg=\"danger\" variant=\"dark\" sticky=\"top\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">Jupyterhub Spawner</Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text>\n              Signed in as: {globals._USERNAME}\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n        <header className=\"App-header\">\n          <div className=\"Grid\">\n            <h3 className=\"Wide\">JupyterHub Server Image</h3>\n            <ImageForm image={globals._IMAGE} username={globals._USERNAME}/>\n          </div>\n          <h3 className=\"Wide\">Deployment size:</h3>\n          <div>\n            <div className=\"Grid\">\n              <h3 className=\"Wide\">Container size:</h3>\n              <SizesForm username={globals._USERNAME}/>\n            </div>\n            <div className=\"Grid\">\n              <h3 className=\"Wide\">GPU:</h3>\n              <GpuForm username={globals._USERNAME}/>\n            </div>\n            \n          </div>\n          <EnvVarForm username={globals._USERNAME}/>\n        </header>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}